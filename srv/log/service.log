# start server
# client request		->	{"name":"init","uId":"jihatrzkxxkyiyf82s","token":null,"application":null,"domain":null}

# handle client messages	->	{"name":"init","uId":"jihatrzkxxkyiyf82s","token":null,"application":null,"domain":null}

# open-session
# [sending std out]: {"name": "init", "address": 111, "port": "/dev/rfcomm0", "baud": 115200}
# client request		->	{"name":"reset-module","baud":115200,"port":"/dev/rfcomm0"}

# init module port: /dev/rfcomm0 | baud:115200
# [sending std out]: {"name": "reset", "status": "success", "message": "serial module initialized:"}
# client request		->	{"name":"set-config","config":"433920000,5,6,12,4,1,0,0,0,0,3000,8,8","address":"111"}

# entering config
# read message: b'AT,OK\r\n'
# ignoring return of module: b'AT,OK'
# [sending std out]: {"name": "set-config", "status": "success", "message": "set config:", "address": null}
# no route found:				111
# [sending std out]: {"name": "routing-table", "data": [{"destination": 111, "nextHop": 111, "precursors": "", "metric": 0, "sequenceNumber": 0, "isValid": true}]}
# route added: {'destination': 111, 'nextHop': 111, 'precursors': '', 'metric': 0, 'sequenceNumber': 0, 'isValid': True}
# set RX
# in waiting: 14
# read message: b'AT,OK\r\n'
# msg: b'AT,OK'
# msg not passed
# in waiting: 7
# read message: b'AT,OK\r\n'
# msg: b'AT,OK'
# msg not passed
# in waiting: 25
# read message: b'LR,0112,0C,AP9wAG8AAHAB\r\n'
# msg: b'LR,0112,0C,AP9wAG8AAHAB'
# msg passing: b'LR,0112,0C,AP9wAG8AAHAB' as string:LR,0112,0C,AP9wAG8AAHAB
# split message
# decode base64 string: AP9wAG8AAHAB
[0, 255, 112]
*  request type:	0
* request flags:	0
* --------------
[0, 255, 112]
# parse packet:	[0, 255, 112, 0, 111, 0, 0, 112, 1]
# rreq to dict:{'type': 0, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 112, 'requestId': 0, 'destAddress': 111, 'destSequence': 0, 'hopCount': 0, 'originAddress': 112, 'originSequence': 1}
# handle route request:		{'type': 0, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 112, 'requestId': 0, 'destAddress': 111, 'destSequence': 0, 'hopCount': 0, 'originAddress': 112, 'originSequence': 1}
# no request exists
(add) reverse routes: [{'destination': 111, 'source': 112, 'requestId': 0, 'metric': 1, 'prevHop': 112}]
# [sending std out]: {"name": "reverse-routing-table", "data": [{"destination": 111, "source": 112, "requestId": 0, "metric": 1, "prevHop": 112}]}
# reverse route: {'destination': 111, 'source': 112, 'requestId': 0, 'metric': 1, 'prevHop': 112}
# route found:				{'destination': 111, 'nextHop': 111, 'precursors': '', 'metric': 0, 'sequenceNumber': 0, 'isValid': True}
# read message: b'AT,OK\r\n'
# ignoring return of module: b'AT,OK'
# [set send mode]:	AT+SEND=12
# [message]		->	b'EP9vAG8AAG8A'
# read message: b'AT,OK\r\n'
# ignoring return of module: b'AT,OK'
* AT return verified, sending message
# read message: b'AT,SENDING\r\n'
# ignoring return of module: b'AT,SENDING'
# [sending std out]: {"name": "message", "message": "# (reply) known route asked: 111, next hop: 111"}
# decoding process finished.
# --------------------------
# in waiting: 11
# read message: b'AT,SENDED\r\n'
# msg: b'AT,SENDED'
# msg not passed
# Shutdown requested by console key interrupt
