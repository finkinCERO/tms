# in waiting: 1
# read message: b'LR,0015,0C,AT+CFG=43392\r\n'
# msg: b'LR,0015,0C,AT+CFG=43392'
# msg passing: b'LR,0015,0C,AT+CFG=43392' as string:LR,0015,0C,AT+CFG=43392
# split message
# decode base64 string: AT+CFG=43392
# no base64 or not right splitted
# in waiting: 5
# read message: b'LR,0015,0C,AP/SAnABANIA\r\n'
# msg: b'LR,0015,0C,AP/SAnABANIA'
# msg passing: b'LR,0015,0C,AP/SAnABANIA' as string:LR,0015,0C,AP/SAnABANIA
# split message
# decode base64 string: AP/SAnABANIA
[0, 255, 210]
*  request type:	0
* request flags:	0
* --------------
[0, 255, 210]
# parse packet:	[0, 255, 210, 2, 112, 1, 0, 210, 0]
# rreq to dict:{'type': 0, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 210, 'requestId': 2, 'destAddress': 112, 'destSequence': 1, 'hopCount': 0, 'originAddress': 210, 'originSequence': 0}
# handle route request:		{'type': 0, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 210, 'requestId': 2, 'destAddress': 112, 'destSequence': 1, 'hopCount': 0, 'originAddress': 210, 'originSequence': 0}
# no request exists
(add) reverse routes: [{'destination': 112, 'source': 210, 'requestId': 2, 'metric': 1, 'prevHop': 210}]
# [sending std out]: {"name": "reverse-routing-table", "data": [{"destination": 112, "source": 210, "requestId": 2, "metric": 1, "prevHop": 210}]}
# no route found:				112
# no route found:				210
# no route found:				210
# [sending std out]: {"name": "routing-table", "data": [{"destination": 111, "nextHop": 111, "precursors": "", "metric": 0, "sequenceNumber": 0, "isValid": true}, {"destination": 210, "nextHop": 210, "precursors": "", "metric": 1, "sequenceNumber": 0, "isValid": true}]}
# route added: {'destination': 210, 'nextHop': 210, 'precursors': '', 'metric': 1, 'sequenceNumber': 0, 'isValid': True}
# route found:				{'destination': 210, 'nextHop': 210, 'precursors': '', 'metric': 1, 'sequenceNumber': 0, 'isValid': True}
# unknown route, rreq: {'type': 0, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 210, 'requestId': 2, 'destAddress': 112, 'destSequence': 1, 'hopCount': 1, 'originAddress': 210, 'originSequence': 0}
# broadcasting route request to find path to: 112
# encoded rreq: b'AP/SAnABAdIA'
# read message: b'AT,OK\r\n'
# [set send mode]:	AT+SEND=12
# [message]		->	b'AP/SAnABAdIA'
# read message: b'AT,OK\r\n'
* AT return verified, sending message
# read message: b'AT,SENDING\r\n'
# sending...
# decoding process finished.
# --------------------------
# in waiting: 1
# read message: b'AT,SENDED\r\n'
# msg: b'AT,SENDED'
# msg not passed
# inwaiting message to exsting route: {'name': 'message', 'viewType': 'default', 'type': 3, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 111, 'destAddress': 210, 'originSequence': 1, 'messageId': 0, 'count': 0, 'timestamp': 1642526614052.6035, 'text': 'qqq'}
# preparing execution of msg to route: {'destination': 210, 'nextHop': 210, 'precursors': '', 'metric': 1, 'sequenceNumber': 0, 'isValid': True}
# message:		b'MNJv0gEAqqq'
# to string:		{'name': 'message', 'viewType': 'default', 'type': 3, 'flags': 0, 'hopAddress': 210, 'prevHopAddress': 111, 'destAddress': 210, 'originSequence': 1, 'messageId': 0, 'count': 0, 'timestamp': 1642526614052.6035, 'text': 'qqq'}
# read message: b'AT,OK\r\n'
# [set send mode]:	AT+SEND=11
# [message]		->	b'MNJv0gEAqqq'
# read message: b'AT,OK\r\n'
* AT return verified, sending message
# read message: b'AT,SENDING\r\n'
# sending...
# in waiting: 1
# read message: b'AT,SENDED\r\n'
# msg: b'AT,SENDED'
# msg not passed
# inwaiting message to exsting route: {'name': 'message', 'viewType': 'default', 'type': 3, 'flags': 0, 'hopAddress': 210, 'prevHopAddress': 111, 'destAddress': 210, 'originSequence': 1, 'messageId': 0, 'count': 1, 'timestamp': 1642526786005.6938, 'text': 'qqq'}
# inwaiting message to exsting route: {'name': 'message', 'viewType': 'default', 'type': 3, 'flags': 0, 'hopAddress': 210, 'prevHopAddress': 111, 'destAddress': 210, 'originSequence': 1, 'messageId': 0, 'count': 1, 'timestamp': 1642526786005.6938, 'text': 'qqq'}
# inwaiting message to exsting route: {'name': 'message', 'viewType': 'default', 'type': 3, 'flags': 0, 'hopAddress': 210, 'prevHopAddress': 111, 'destAddress': 210, 'originSequence': 1, 'messageId': 0, 'count': 1, 'timestamp': 1642526786005.6938, 'text': 'qqq'}
# preparing execution of msg to route: {'destination': 210, 'nextHop': 210, 'precursors': '', 'metric': 1, 'sequenceNumber': 0, 'isValid': True}
# message:		b'MNJv0gEAqqq'
# to string:		{'name': 'message', 'viewType': 'default', 'type': 3, 'flags': 0, 'hopAddress': 210, 'prevHopAddress': 111, 'destAddress': 210, 'originSequence': 1, 'messageId': 0, 'count': 1, 'timestamp': 1642526786005.6938, 'text': 'qqq'}
# read message: b'AT,OK\r\n'
# [set send mode]:	AT+SEND=11
# [message]		->	b'MNJv0gEAqqq'
# read message: b'AT,OK\r\n'
* AT return verified, sending message
# read message: b'AT,SENDING\r\n'
# sending...
# in waiting: 3
# read message: b'AT,SENDED\r\n'
# msg: b'AT,SENDED'
# msg not passed
# inwaiting message to exsting route: {'name': 'message', 'viewType': 'default', 'type': 3, 'flags': 0, 'hopAddress': 210, 'prevHopAddress': 111, 'destAddress': 210, 'originSequence': 1, 'messageId': 0, 'count': 2, 'timestamp': 1642526936044.9604, 'text': 'qqq'}
# in waiting: 3
# read message: b'LR,0015,0C,AP/SAnABANIA\r\n'
# msg: b'LR,0015,0C,AP/SAnABANIA'
# msg passing: b'LR,0015,0C,AP/SAnABANIA' as string:LR,0015,0C,AP/SAnABANIA
# split message
# decode base64 string: AP/SAnABANIA
[0, 255, 210]
*  request type:	0
* request flags:	0
* --------------
[0, 255, 210]
# parse packet:	[0, 255, 210, 2, 112, 1, 0, 210, 0]
# rreq to dict:{'type': 0, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 210, 'requestId': 2, 'destAddress': 112, 'destSequence': 1, 'hopCount': 0, 'originAddress': 210, 'originSequence': 0}
# handle route request:		{'type': 0, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 210, 'requestId': 2, 'destAddress': 112, 'destSequence': 1, 'hopCount': 0, 'originAddress': 210, 'originSequence': 0}
# no request exists
# route request is known
# decoding process finished.
# --------------------------
# in waiting: 7
# read message: b'LR,0112,0C,ENJwAtIBAHAA\r\n'
# msg: b'LR,0112,0C,ENJwAtIBAHAA'
# msg passing: b'LR,0112,0C,ENJwAtIBAHAA' as string:LR,0112,0C,ENJwAtIBAHAA
# split message
# decode base64 string: ENJwAtIBAHAA
[16, 210, 112]
*  request type:	1
* request flags:	0
* --------------
[16, 210, 112]
# route reply detected
# parse packet:	[16, 210, 112, 2, 210, 1, 0, 112, 0]
# ignore route reply
# decoding process finished.
# --------------------------
# inwaiting message to exsting route: {'name': 'message', 'viewType': 'default', 'type': 3, 'flags': 0, 'hopAddress': 210, 'prevHopAddress': 111, 'destAddress': 210, 'originSequence': 1, 'messageId': 0, 'count': 2, 'timestamp': 1642526936044.9604, 'text': 'qqq'}
# inwaiting message to exsting route: {'name': 'message', 'viewType': 'default', 'type': 3, 'flags': 0, 'hopAddress': 210, 'prevHopAddress': 111, 'destAddress': 210, 'originSequence': 1, 'messageId': 0, 'count': 2, 'timestamp': 1642526936044.9604, 'text': 'qqq'}
# preparing execution of msg to route: {'destination': 210, 'nextHop': 210, 'precursors': '', 'metric': 1, 'sequenceNumber': 0, 'isValid': True}
# message:		b'MNJv0gEAqqq'
# to string:		{'name': 'message', 'viewType': 'default', 'type': 3, 'flags': 0, 'hopAddress': 210, 'prevHopAddress': 111, 'destAddress': 210, 'originSequence': 1, 'messageId': 0, 'count': 2, 'timestamp': 1642526936044.9604, 'text': 'qqq'}
# read message: b'AT,OK\r\n'
# [set send mode]:	AT+SEND=11
# [message]		->	b'MNJv0gEAqqq'
# read message: b'AT,OK\r\n'
* AT return verified, sending message
# read message: b'AT,SENDING\r\n'
# sending...
# in waiting: 1
# read message: b'AT,SENDED\r\n'
# msg: b'AT,SENDED'
# msg not passed
# in waiting: 1
# read message: b'LR,0015,0C,AP/SBHABANIA\r\n'
# msg: b'LR,0015,0C,AP/SBHABANIA'
# msg passing: b'LR,0015,0C,AP/SBHABANIA' as string:LR,0015,0C,AP/SBHABANIA
# split message
# decode base64 string: AP/SBHABANIA
[0, 255, 210]
*  request type:	0
* request flags:	0
* --------------
[0, 255, 210]
# parse packet:	[0, 255, 210, 4, 112, 1, 0, 210, 0]
# rreq to dict:{'type': 0, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 210, 'requestId': 4, 'destAddress': 112, 'destSequence': 1, 'hopCount': 0, 'originAddress': 210, 'originSequence': 0}
# handle route request:		{'type': 0, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 210, 'requestId': 4, 'destAddress': 112, 'destSequence': 1, 'hopCount': 0, 'originAddress': 210, 'originSequence': 0}
# no request exists
(add) reverse routes: [{'destination': 112, 'source': 210, 'requestId': 2, 'metric': 1, 'prevHop': 210}]
# [sending std out]: {"name": "reverse-routing-table", "data": [{"destination": 112, "source": 210, "requestId": 2, "metric": 1, "prevHop": 210}]}
# no route found:				112
# route found:				{'destination': 210, 'nextHop': 210, 'precursors': '', 'metric': 1, 'sequenceNumber': 0, 'isValid': True}
# route found:				{'destination': 210, 'nextHop': 210, 'precursors': '', 'metric': 1, 'sequenceNumber': 0, 'isValid': True}
# unknown route, rreq: {'type': 0, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 210, 'requestId': 4, 'destAddress': 112, 'destSequence': 1, 'hopCount': 1, 'originAddress': 210, 'originSequence': 0}
# broadcasting route request to find path to: 112
# encoded rreq: b'AP/SBHABAdIA'
# read message: b'AT,OK\r\n'
# [set send mode]:	AT+SEND=12
# [message]		->	b'AP/SBHABAdIA'
# read message: b'AT,OK\r\n'
* AT return verified, sending message
# read message: b'AT,SENDING\r\n'
# sending...
# decoding process finished.
# --------------------------
# in waiting: 11
# read message: b'AT,SENDED\r\n'
# msg: b'AT,SENDED'
# msg not passed
# in waiting: 6
# read message: b'LR,0015,0C,AP/SBnABANIA\r\n'
# msg: b'LR,0015,0C,AP/SBnABANIA'
# msg passing: b'LR,0015,0C,AP/SBnABANIA' as string:LR,0015,0C,AP/SBnABANIA
# split message
# decode base64 string: AP/SBnABANIA
[0, 255, 210]
*  request type:	0
* request flags:	0
* --------------
[0, 255, 210]
# parse packet:	[0, 255, 210, 6, 112, 1, 0, 210, 0]
# rreq to dict:{'type': 0, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 210, 'requestId': 6, 'destAddress': 112, 'destSequence': 1, 'hopCount': 0, 'originAddress': 210, 'originSequence': 0}
# handle route request:		{'type': 0, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 210, 'requestId': 6, 'destAddress': 112, 'destSequence': 1, 'hopCount': 0, 'originAddress': 210, 'originSequence': 0}
# no request exists
(add) reverse routes: [{'destination': 112, 'source': 210, 'requestId': 2, 'metric': 1, 'prevHop': 210}]
# [sending std out]: {"name": "reverse-routing-table", "data": [{"destination": 112, "source": 210, "requestId": 2, "metric": 1, "prevHop": 210}]}
# no route found:				112
# route found:				{'destination': 210, 'nextHop': 210, 'precursors': '', 'metric': 1, 'sequenceNumber': 0, 'isValid': True}
# route found:				{'destination': 210, 'nextHop': 210, 'precursors': '', 'metric': 1, 'sequenceNumber': 0, 'isValid': True}
# unknown route, rreq: {'type': 0, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 210, 'requestId': 6, 'destAddress': 112, 'destSequence': 1, 'hopCount': 1, 'originAddress': 210, 'originSequence': 0}
# broadcasting route request to find path to: 112
# encoded rreq: b'AP/SBnABAdIA'
# read message: b'AT,OK\r\n'
# [set send mode]:	AT+SEND=12
# [message]		->	b'AP/SBnABAdIA'
# read message: b'AT,OK\r\n'
* AT return verified, sending message
# read message: b'AT,SENDING\r\n'
# sending...
# decoding process finished.
# --------------------------
# in waiting: 1
# read message: b'AT,SENDED\r\n'
# msg: b'AT,SENDED'
# msg not passed
# inwaiting message to exsting route: {'name': 'message', 'viewType': 'default', 'type': 3, 'flags': 0, 'hopAddress': 210, 'prevHopAddress': 111, 'destAddress': 210, 'originSequence': 1, 'messageId': 0, 'count': 3, 'timestamp': 1642527086101.6055, 'text': 'qqq'}
# [sending std out]: {"name": "error", "message": "message to 210 failed. Message: qqq"}
# [sending std out]: {"name": "routing-table", "data": [{"destination": 111, "nextHop": 111, "precursors": "", "metric": 0, "sequenceNumber": 0, "isValid": true}, {"destination": 210, "nextHop": 210, "precursors": "", "metric": 1, "sequenceNumber": 0, "isValid": false}]}
# in waiting: 1
# read message: b'LR,0015,0C,AT+CFG=43392\r\n'
# msg: b'LR,0015,0C,AT+CFG=43392'
# msg passing: b'LR,0015,0C,AT+CFG=43392' as string:LR,0015,0C,AT+CFG=43392
# split message
# decode base64 string: AT+CFG=43392
# no base64 or not right splitted
# in waiting: 1
# read message: b'LR,0015,0C,AP/SAnABANIA\r\n'
# msg: b'LR,0015,0C,AP/SAnABANIA'
# msg passing: b'LR,0015,0C,AP/SAnABANIA' as string:LR,0015,0C,AP/SAnABANIA
# split message
# decode base64 string: AP/SAnABANIA
[0, 255, 210]
*  request type:	0
* request flags:	0
* --------------
[0, 255, 210]
# parse packet:	[0, 255, 210, 2, 112, 1, 0, 210, 0]
# rreq to dict:{'type': 0, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 210, 'requestId': 2, 'destAddress': 112, 'destSequence': 1, 'hopCount': 0, 'originAddress': 210, 'originSequence': 0}
# handle route request:		{'type': 0, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 210, 'requestId': 2, 'destAddress': 112, 'destSequence': 1, 'hopCount': 0, 'originAddress': 210, 'originSequence': 0}
# no request exists
# route request is known
# decoding process finished.
# --------------------------
# in waiting: 1
# read message: b'LR,0112,0C,ENJwAtIBAHAA\r\n'
# msg: b'LR,0112,0C,ENJwAtIBAHAA'
# msg passing: b'LR,0112,0C,ENJwAtIBAHAA' as string:LR,0112,0C,ENJwAtIBAHAA
# split message
# decode base64 string: ENJwAtIBAHAA
[16, 210, 112]
*  request type:	1
* request flags:	0
* --------------
[16, 210, 112]
# route reply detected
# parse packet:	[16, 210, 112, 2, 210, 1, 0, 112, 0]
# ignore route reply
# decoding process finished.
# --------------------------
# in waiting: 1
# read message: b'LR,0015,0C,AT+CFG=43392\r\n'
# msg: b'LR,0015,0C,AT+CFG=43392'
# msg passing: b'LR,0015,0C,AT+CFG=43392' as string:LR,0015,0C,AT+CFG=43392
# split message
# decode base64 string: AT+CFG=43392
# no base64 or not right splitted
# Shutdown requested by console key interrupt
# start server
# client request		->	{"name":"init","uId":"3ql32liq3flkykeh1t6","token":null,"application":null,"domain":null}

# handle client messages	->	{"name":"init","uId":"3ql32liq3flkykeh1t6","token":null,"application":null,"domain":null}

# open-session
# [sending std out]: {"name": "init", "address": 111, "port": "/dev/rfcomm0", "baud": 115200}
# client request		->	{"name":"reset-module","baud":115200,"port":"/dev/rfcomm0"}

# init module port: /dev/rfcomm0 | baud:115200
# [sending std out]: {"name": "reset", "status": "success", "message": "serial module initialized:"}
# client request		->	{"name":"set-config","config":"433920000,5,6,12,4,1,0,0,0,0,3000,8,8","address":"111"}

# entering config
# read message: b'AT,OK\r\n'
# [sending std out]: {"name": "set-config", "status": "success", "message": "set config:", "address": null}
# no route found:				111
# [sending std out]: {"name": "routing-table", "data": [{"destination": 111, "nextHop": 111, "precursors": "", "metric": 0, "sequenceNumber": 0, "isValid": true}]}
# route added: {'destination': 111, 'nextHop': 111, 'precursors': '', 'metric': 0, 'sequenceNumber': 0, 'isValid': True}
# set RX
# in waiting: 14
# read message: b'AT,OK\r\n'
# msg: b'AT,OK'
# msg not passed
# in waiting: 7
# read message: b'AT,OK\r\n'
# msg: b'AT,OK'
# msg not passed
# client request		->	{"name":"client-message","message":"hello","destination":"111"}

# handle client messages	->	{"name":"client-message","message":"hello","destination":"111"}

# client message route: {'destination': 111, 'nextHop': 111, 'precursors': '', 'metric': 0, 'sequenceNumber': 0, 'isValid': True}
# routes: [{'destination': 111, 'nextHop': 111, 'precursors': '', 'metric': 0, 'sequenceNumber': 0, 'isValid': True}]
# existing route
# route: {'destination': 111, 'nextHop': 111, 'precursors': '', 'metric': 0, 'sequenceNumber': 0, 'isValid': True}
# msg: {'name': 'message', 'viewType': 'default', 'type': 3, 'flags': 0, 'hopAddress': 111, 'prevHopAddress': 111, 'destAddress': 111, 'originSequence': 0, 'messageId': 0, 'count': 0, 'timestamp': 1642527528472.5032, 'text': 'hello'}
# active messages: [<bin.packets.msg.Msg object at 0x7f15b97ee400>]
# inwaiting message to exsting route: {'name': 'message', 'viewType': 'default', 'type': 3, 'flags': 0, 'hopAddress': 111, 'prevHopAddress': 111, 'destAddress': 111, 'originSequence': 0, 'messageId': 0, 'count': 0, 'timestamp': 1642527528472.5032, 'text': 'hello'}
# [sending std out]: {"name": "message", "viewType": "default", "type": 3, "flags": 0, "hopAddress": 111, "prevHopAddress": 111, "destAddress": 111, "originSequence": 0, "messageId": 0, "count": 0, "timestamp": 1642527528472.5032, "text": "hello"}
# client request		->	{"name":"client-message","message":"penis","destination":"210"}

# handle client messages	->	{"name":"client-message","message":"penis","destination":"210"}

# client message route: None
# routes: [{'destination': 111, 'nextHop': 111, 'precursors': '', 'metric': 0, 'sequenceNumber': 0, 'isValid': True}]
message: {'name': 'message', 'viewType': 'default', 'type': 3, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 111, 'destAddress': 210, 'originSequence': 1, 'messageId': 1, 'count': 0, 'timestamp': 1642527605012.9033, 'text': 'penis'}
# read message: b'AT,OK\r\n'
# [set send mode]:	AT+SEND=12
# [message]		->	b'AP9vAdIAAG8B'
# read message: b'AT,OK\r\n'
* AT return verified, sending message
# read message: b'AT,SENDING\r\n'
# sending...
# [sending std out]: {"name": "system-message", "message": "route request made to address: 210 | origin: 111"}
# in waiting: 1
# read message: b'AT,SENDED\r\n'
# msg: b'AT,SENDED'
# msg not passed
# in waiting: 7
# read message: b'LR,0112,0C,EG9wAW8AAXAA\r\n'
# msg: b'LR,0112,0C,EG9wAW8AAXAA'
# msg passing: b'LR,0112,0C,EG9wAW8AAXAA' as string:LR,0112,0C,EG9wAW8AAXAA
# split message
# decode base64 string: EG9wAW8AAXAA
[16, 111, 112]
*  request type:	1
* request flags:	0
* --------------
[16, 111, 112]
# route reply detected
# parse packet:	[16, 111, 112, 1, 111, 0, 1, 112, 0]
* reply:		{'type': 1, 'flags': 0, 'hopAddress': 111, 'prevHopAddress': 112, 'requestId': 1, 'destAddress': 111, 'destinationSeqence': 0, 'hopCount': 2, 'originAddress': 112, 'originSequence': 0}
* reply addr:		111 this addr:	111
# [sending std out]: {"name": "system-message", "message": "got route reply to: 112 for: 111"}
# reply is addressed to this moudle: 111
# no route found:				112
# [sending std out]: {"name": "routing-table", "data": [{"destination": 111, "nextHop": 111, "precursors": "", "metric": 0, "sequenceNumber": 0, "isValid": true}, {"destination": 112, "nextHop": 112, "precursors": "", "metric": 2, "sequenceNumber": 0, "isValid": true}]}
# route added: {'destination': 112, 'nextHop': 112, 'precursors': '', 'metric': 2, 'sequenceNumber': 0, 'isValid': True}
* active requests: {'rreq': [<bin.packets.rreq.Rreq object at 0x7f15b97ee370>], 'rrep': [], 'msg': [<bin.packets.msg.Msg object at 0x7f15b97ee400>], 'ack': [], 'rerr': []}
# message found for route reply: {'name': 'message', 'viewType': 'default', 'type': 3, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 111, 'destAddress': 210, 'originSequence': 1, 'messageId': 1, 'count': 0, 'timestamp': 1642527605012.9033, 'text': 'penis'}
# decoding process finished.
# --------------------------
# Shutdown requested by console key interrupt
# start server
# client request		->	{"name":"init","uId":"7pnorq3hdkqkykeju3y","token":null,"application":null,"domain":null}

# handle client messages	->	{"name":"init","uId":"7pnorq3hdkqkykeju3y","token":null,"application":null,"domain":null}

# open-session
# [sending std out]: {"name": "init", "address": 111, "port": "/dev/rfcomm0", "baud": 115200}
# client request		->	{"name":"reset-module","baud":115200,"port":"/dev/rfcomm0"}

# init module port: /dev/rfcomm0 | baud:115200
# [sending std out]: {"name": "reset", "status": "success", "message": "serial module initialized:"}
# client request		->	{"name":"set-config","config":"433920000,5,6,12,4,1,0,0,0,0,3000,8,8","address":"111"}

# entering config
# read message: b'AT,OK\r\n'
# [sending std out]: {"name": "set-config", "status": "success", "message": "set config:", "address": null}
# no route found:				111
# [sending std out]: {"name": "routing-table", "data": [{"destination": 111, "nextHop": 111, "precursors": "", "metric": 0, "sequenceNumber": 0, "isValid": true}]}
# route added: {'destination': 111, 'nextHop': 111, 'precursors': '', 'metric': 0, 'sequenceNumber': 0, 'isValid': True}
# set RX
# in waiting: 14
# read message: b'AT,OK\r\n'
# msg: b'AT,OK'
# msg not passed
# in waiting: 7
# read message: b'AT,OK\r\n'
# msg: b'AT,OK'
# msg not passed
# client request		->	{"name":"client-message","message":"hello give me route","destination":"210"}

# handle client messages	->	{"name":"client-message","message":"hello give me route","destination":"210"}

# client message route: None
# routes: [{'destination': 111, 'nextHop': 111, 'precursors': '', 'metric': 0, 'sequenceNumber': 0, 'isValid': True}]
message: {'name': 'message', 'viewType': 'default', 'type': 3, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 111, 'destAddress': 210, 'originSequence': 1, 'messageId': 0, 'count': 0, 'timestamp': 1642527660975.4343, 'text': 'hello give me route'}
# read message: b'AT,OK\r\n'
# [set send mode]:	AT+SEND=12
# [message]		->	b'AP9vANIAAG8B'
# read message: b'AT,OK\r\n'
* AT return verified, sending message
# read message: b'AT,SENDING\r\n'
# sending...
# [sending std out]: {"name": "system-message", "message": "route request made to address: 210 | origin: 111"}
# in waiting: 1
# read message: b'AT,SENDED\r\n'
# msg: b'AT,SENDED'
# msg not passed
# in waiting: 5
# read message: b'LR,0015,0C,EG/SAG8BANID\r\n'
# msg: b'LR,0015,0C,EG/SAG8BANID'
# msg passing: b'LR,0015,0C,EG/SAG8BANID' as string:LR,0015,0C,EG/SAG8BANID
# split message
# decode base64 string: EG/SAG8BANID
[16, 111, 210]
*  request type:	1
* request flags:	0
* --------------
[16, 111, 210]
# route reply detected
# parse packet:	[16, 111, 210, 0, 111, 1, 0, 210, 3]
* reply:		{'type': 1, 'flags': 0, 'hopAddress': 111, 'prevHopAddress': 210, 'requestId': 0, 'destAddress': 111, 'destinationSeqence': 1, 'hopCount': 1, 'originAddress': 210, 'originSequence': 3}
* reply addr:		111 this addr:	111
# [sending std out]: {"name": "system-message", "message": "got route reply to: 210 for: 111"}
# reply is addressed to this moudle: 111
# no route found:				210
# [sending std out]: {"name": "routing-table", "data": [{"destination": 111, "nextHop": 111, "precursors": "", "metric": 0, "sequenceNumber": 0, "isValid": true}, {"destination": 210, "nextHop": 210, "precursors": "", "metric": 1, "sequenceNumber": 1, "isValid": true}]}
# route added: {'destination': 210, 'nextHop': 210, 'precursors': '', 'metric': 1, 'sequenceNumber': 1, 'isValid': True}
* active requests: {'rreq': [<bin.packets.rreq.Rreq object at 0x7fae52445370>], 'rrep': [], 'msg': [<bin.packets.msg.Msg object at 0x7fae52445340>], 'ack': [], 'rerr': []}
# message found for route reply: {'name': 'message', 'viewType': 'default', 'type': 3, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 111, 'destAddress': 210, 'originSequence': 1, 'messageId': 0, 'count': 0, 'timestamp': 1642527660975.4343, 'text': 'hello give me route'}
# decoding process finished.
# --------------------------
# inwaiting message to exsting route: {'name': 'message', 'viewType': 'default', 'type': 3, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 111, 'destAddress': 210, 'originSequence': 1, 'messageId': 0, 'count': 0, 'timestamp': 1642527660975.4343, 'text': 'hello give me route'}
# preparing execution of msg to route: {'destination': 210, 'nextHop': 210, 'precursors': '', 'metric': 1, 'sequenceNumber': 1, 'isValid': True}
# message:		b'MNJv0gEAhello give me route'
# to string:		{'name': 'message', 'viewType': 'default', 'type': 3, 'flags': 0, 'hopAddress': 210, 'prevHopAddress': 111, 'destAddress': 210, 'originSequence': 1, 'messageId': 0, 'count': 0, 'timestamp': 1642527660975.4343, 'text': 'hello give me route'}
# read message: b'AT,OK\r\n'
# [set send mode]:	AT+SEND=27
# [message]		->	b'MNJv0gEAhello give me route'
# read message: b'AT,OK\r\n'
* AT return verified, sending message
# read message: b'AT,SENDING\r\n'
# sending...
# in waiting: 1
# read message: b'AT,SENDED\r\n'
# msg: b'AT,SENDED'
# msg not passed
# in waiting: 3
# read message: b'LR,0015,04,QG/S\r\n'
# msg: b'LR,0015,04,QG/S'
# msg passing: b'LR,0015,04,QG/S' as string:LR,0015,04,QG/S
# split message
# decode base64 string: QG/S
[64, 111, 210]
*  request type:	4
* request flags:	0
* --------------
[64, 111, 210]
# parse packet:	[64, 111, 210]
= parsing ack
# ack: {'type': 4, 'flags': 0, 'hopAddress': 111, 'prevHopAddress': 210}
# Active Requests: {'rreq': [<bin.packets.rreq.Rreq object at 0x7fae52445370>], 'rrep': [], 'msg': [<bin.packets.msg.Msg object at 0x7fae52445340>], 'ack': [], 'rerr': []}
# 2. Active Requests: {'rreq': [<bin.packets.rreq.Rreq object at 0x7fae52445370>], 'rrep': [], 'msg': [], 'ack': [], 'rerr': []}
# [sending std out]: {"name": "message", "viewType": "default", "type": 3, "flags": 0, "hopAddress": 210, "prevHopAddress": 111, "destAddress": 210, "originSequence": 1, "messageId": 0, "count": 1, "timestamp": 1642527695655.2117, "text": "hello give me route"}
# ack detected
# decoding process finished.
# --------------------------
# client request		->	{"name":"client-message","message":"000","destination":"210"}

# handle client messages	->	{"name":"client-message","message":"000","destination":"210"}

# client message route: {'destination': 210, 'nextHop': 210, 'precursors': '', 'metric': 1, 'sequenceNumber': 1, 'isValid': True}
# routes: [{'destination': 111, 'nextHop': 111, 'precursors': '', 'metric': 0, 'sequenceNumber': 0, 'isValid': True}, {'destination': 210, 'nextHop': 210, 'precursors': '', 'metric': 1, 'sequenceNumber': 1, 'isValid': True}]
# existing route
# route: {'destination': 210, 'nextHop': 210, 'precursors': '', 'metric': 1, 'sequenceNumber': 1, 'isValid': True}
# msg: {'name': 'message', 'viewType': 'default', 'type': 3, 'flags': 0, 'hopAddress': 210, 'prevHopAddress': 111, 'destAddress': 210, 'originSequence': 1, 'messageId': 1, 'count': 0, 'timestamp': 1642527797941.4175, 'text': '000'}
# active messages: [<bin.packets.msg.Msg object at 0x7fae524454c0>]
# inwaiting message to exsting route: {'name': 'message', 'viewType': 'default', 'type': 3, 'flags': 0, 'hopAddress': 210, 'prevHopAddress': 111, 'destAddress': 210, 'originSequence': 1, 'messageId': 1, 'count': 0, 'timestamp': 1642527797941.4175, 'text': '000'}
# preparing execution of msg to route: {'destination': 210, 'nextHop': 210, 'precursors': '', 'metric': 1, 'sequenceNumber': 1, 'isValid': True}
# message:		b'MNJv0gEB000'
# to string:		{'name': 'message', 'viewType': 'default', 'type': 3, 'flags': 0, 'hopAddress': 210, 'prevHopAddress': 111, 'destAddress': 210, 'originSequence': 1, 'messageId': 1, 'count': 0, 'timestamp': 1642527797941.4175, 'text': '000'}
# read message: b'AT,OK\r\n'
# [set send mode]:	AT+SEND=11
# [message]		->	b'MNJv0gEB000'
# read message: b'AT,OK\r\n'
* AT return verified, sending message
# read message: b'AT,SENDING\r\n'
# sending...
# in waiting: 11
# read message: b'AT,SENDED\r\n'
# msg: b'AT,SENDED'
# msg not passed
# in waiting: 2
# read message: b'LR,0015,04,QG/S\r\n'
# msg: b'LR,0015,04,QG/S'
# msg passing: b'LR,0015,04,QG/S' as string:LR,0015,04,QG/S
# split message
# decode base64 string: QG/S
[64, 111, 210]
*  request type:	4
* request flags:	0
* --------------
[64, 111, 210]
# parse packet:	[64, 111, 210]
= parsing ack
# ack: {'type': 4, 'flags': 0, 'hopAddress': 111, 'prevHopAddress': 210}
# Active Requests: {'rreq': [<bin.packets.rreq.Rreq object at 0x7fae52445370>], 'rrep': [], 'msg': [<bin.packets.msg.Msg object at 0x7fae524454c0>], 'ack': [], 'rerr': []}
# 2. Active Requests: {'rreq': [<bin.packets.rreq.Rreq object at 0x7fae52445370>], 'rrep': [], 'msg': [], 'ack': [], 'rerr': []}
# [sending std out]: {"name": "message", "viewType": "default", "type": 3, "flags": 0, "hopAddress": 210, "prevHopAddress": 111, "destAddress": 210, "originSequence": 1, "messageId": 1, "count": 1, "timestamp": 1642527845678.698, "text": "000"}
# ack detected
# decoding process finished.
# --------------------------
# in waiting: 1
# read message: b'LR,0015,0C,AT+CFG=43392\r\n'
# msg: b'LR,0015,0C,AT+CFG=43392'
# msg passing: b'LR,0015,0C,AT+CFG=43392' as string:LR,0015,0C,AT+CFG=43392
# split message
# decode base64 string: AT+CFG=43392
# no base64 or not right splitted
# in waiting: 1
# read message: b'LR,0015,0C,AP/SAnABANIA\r\n'
# msg: b'LR,0015,0C,AP/SAnABANIA'
# msg passing: b'LR,0015,0C,AP/SAnABANIA' as string:LR,0015,0C,AP/SAnABANIA
# split message
# decode base64 string: AP/SAnABANIA
[0, 255, 210]
*  request type:	0
* request flags:	0
* --------------
[0, 255, 210]
# parse packet:	[0, 255, 210, 2, 112, 1, 0, 210, 0]
# rreq to dict:{'type': 0, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 210, 'requestId': 2, 'destAddress': 112, 'destSequence': 1, 'hopCount': 0, 'originAddress': 210, 'originSequence': 0}
# handle route request:		{'type': 0, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 210, 'requestId': 2, 'destAddress': 112, 'destSequence': 1, 'hopCount': 0, 'originAddress': 210, 'originSequence': 0}
# no request exists
(add) reverse routes: [{'destination': 112, 'source': 210, 'requestId': 2, 'metric': 1, 'prevHop': 210}]
# [sending std out]: {"name": "reverse-routing-table", "data": [{"destination": 112, "source": 210, "requestId": 2, "metric": 1, "prevHop": 210}]}
# no route found:				112
# route found:				{'destination': 210, 'nextHop': 210, 'precursors': '', 'metric': 1, 'sequenceNumber': 1, 'isValid': True}
# route found:				{'destination': 210, 'nextHop': 210, 'precursors': '', 'metric': 1, 'sequenceNumber': 1, 'isValid': True}
# unknown route, rreq: {'type': 0, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 210, 'requestId': 2, 'destAddress': 112, 'destSequence': 1, 'hopCount': 1, 'originAddress': 210, 'originSequence': 0}
# broadcasting route request to find path to: 112
# encoded rreq: b'AP/SAnABAdIA'
# read message: b'AT,OK\r\n'
# [set send mode]:	AT+SEND=12
# [message]		->	b'AP/SAnABAdIA'
# read message: b'AT,OK\r\n'
* AT return verified, sending message
# read message: b'AT,SENDING\r\n'
# sending...
# decoding process finished.
# --------------------------
# in waiting: 1
# read message: b'AT,SENDED\r\n'
# msg: b'AT,SENDED'
# msg not passed
# programm stopped with exception ...
# start server
# client request		->	{"name":"init","uId":"pe3xvax6xxnkylopln6","token":null,"application":null,"domain":null}

# handle client messages	->	{"name":"init","uId":"pe3xvax6xxnkylopln6","token":null,"application":null,"domain":null}

# open-session
# [sending std out]: {"name": "init", "address": 111, "port": "/dev/rfcomm0", "baud": 115200, "config": "433920000,5,6,12,4,1,0,0,0,0,3000,8,8"}
# client request		->	{"name":"reset-module","baud":115200,"port":"/dev/rfcomm0"}

# init module port: /dev/rfcomm0 | baud:115200
# [sending std out]: {"name": "error", "message": "Error occured during initialisation, please check port permissions of host, port name or if valid baudrate is setted"}
# module init error (reset failed)
# start server
# client request		->	{"name":"init","uId":"zixkdvikfykymo677b","token":null,"application":null,"domain":null}

# handle client messages	->	{"name":"init","uId":"zixkdvikfykymo677b","token":null,"application":null,"domain":null}

# open-session
# [sending std out]: {"name": "init", "address": 111, "port": "/dev/rfcomm0", "baud": 115200, "config": "433920000,5,6,12,4,1,0,0,0,0,3000,8,8"}
# client request		->	{"name":"reset-module","baud":115200,"port":"/dev/rfcomm0"}

# init module port: /dev/rfcomm0 | baud:115200
# [sending std out]: {"name": "reset", "status": "success", "message": "serial module initialized:"}
# client request		->	{"name":"set-config","config":"433920000,5,6,12,4,1,0,0,0,0,3000,8,8","address":"111"}

# entering config
# read message: b'AT,OK\r\n'
# [sending std out]: {"name": "set-config", "status": "success", "message": "set config:", "address": null}
# no route found:				111
# [sending std out]: {"name": "routing-table", "data": [{"destination": 111, "nextHop": 111, "precursors": "", "metric": 0, "sequenceNumber": 0, "isValid": true}]}
# route added: {'destination': 111, 'nextHop': 111, 'precursors': '', 'metric': 0, 'sequenceNumber': 0, 'isValid': True}
# set RX
# in waiting: 14
# read message: b'AT,OK\r\n'
# msg: b'AT,OK'
# msg not passed
# in waiting: 7
# read message: b'AT,OK\r\n'
# msg: b'AT,OK'
# msg not passed
# in waiting: 5
# read message: b'LR,0112,0C,AP9wAG8AAHAB\r\n'
# msg: b'LR,0112,0C,AP9wAG8AAHAB'
# msg passing: b'LR,0112,0C,AP9wAG8AAHAB' as string:LR,0112,0C,AP9wAG8AAHAB
# split message
# decode base64 string: AP9wAG8AAHAB
[0, 255, 112]
*  request type:	0
* request flags:	0
* --------------
[0, 255, 112]
# parse packet:	[0, 255, 112, 0, 111, 0, 0, 112, 1]
# rreq to dict:{'type': 0, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 112, 'requestId': 0, 'destAddress': 111, 'destSequence': 0, 'hopCount': 0, 'originAddress': 112, 'originSequence': 1}
# handle route request:		{'type': 0, 'flags': 0, 'hopAddress': 255, 'prevHopAddress': 112, 'requestId': 0, 'destAddress': 111, 'destSequence': 0, 'hopCount': 0, 'originAddress': 112, 'originSequence': 1}
# no request exists
(add) reverse routes: [{'destination': 111, 'source': 112, 'requestId': 0, 'metric': 1, 'prevHop': 112}]
# [sending std out]: {"name": "reverse-routing-table", "data": [{"destination": 111, "source": 112, "requestId": 0, "metric": 1, "prevHop": 112}]}
# route found:				{'destination': 111, 'nextHop': 111, 'precursors': '', 'metric': 0, 'sequenceNumber': 0, 'isValid': True}
# no route found:				112
# no route found:				112
# [sending std out]: {"name": "routing-table", "data": [{"destination": 111, "nextHop": 111, "precursors": "", "metric": 0, "sequenceNumber": 0, "isValid": true}, {"destination": 112, "nextHop": 112, "precursors": "", "metric": 1, "sequenceNumber": 1, "isValid": true}]}
# route added: {'destination': 112, 'nextHop': 112, 'precursors': '', 'metric': 1, 'sequenceNumber': 1, 'isValid': True}
# route found:				{'destination': 112, 'nextHop': 112, 'precursors': '', 'metric': 1, 'sequenceNumber': 1, 'isValid': True}
# read message: b'AT,OK\r\n'
# [set send mode]:	AT+SEND=12
# [message]		->	b'EHBvAHAAAG8A'
# read message: b'AT,OK\r\n'
* AT return verified, sending message
# read message: b'AT,SENDING\r\n'
# sending...
# [sending std out]: {"name": "message", "message": "# (reply) known route asked: 111, next hop: 111"}
# decoding process finished.
# --------------------------
# in waiting: 1
# read message: b'AT,SENDED\r\n'
# msg: b'AT,SENDED'
# msg not passed
# in waiting: 1
# read message: b'LR,0112,0D,MG9wbwEAhello\r\n'
# msg: b'LR,0112,0D,MG9wbwEAhello'
# msg passing: b'LR,0112,0D,MG9wbwEAhello' as string:LR,0112,0D,MG9wbwEAhello
# split message
# decode base64 string: MG9wbwEAhello
[48, 111, 112]
*  request type:	3
* request flags:	0
* --------------
[48, 111, 112]
# message detected
# parse packet:	[48, 111, 112, 111, 1, 0]
= parsing msg
# handle msg
# read message: b'AT,OK\r\n'
# [set send mode]:	AT+SEND=4
# [message]		->	b'QHBv'
# read message: b'AT,OK\r\n'
* AT return verified, sending message
# read message: b'AT,SENDING\r\n'
# sending...
# decoding process finished.
# --------------------------
# in waiting: 1
# read message: b'AT,SENDED\r\n'
# msg: b'AT,SENDED'
# msg not passed
# inwaiting message to exsting route: {'name': 'message', 'viewType': 'default', 'type': 3, 'flags': 0, 'hopAddress': 111, 'prevHopAddress': 112, 'destAddress': 111, 'originSequence': 1, 'messageId': 0, 'count': 0, 'timestamp': 1642665314429.852, 'text': 'hello'}
# [sending std out]: {"name": "message", "viewType": "default", "type": 3, "flags": 0, "hopAddress": 111, "prevHopAddress": 112, "destAddress": 111, "originSequence": 1, "messageId": 0, "count": 0, "timestamp": 1642665314429.852, "text": "hello"}
# in waiting: 10
# read message: b'LR,0112,0E,MG9wbwEBhello2\r\n'
# msg: b'LR,0112,0E,MG9wbwEBhello2'
# msg passing: b'LR,0112,0E,MG9wbwEBhello2' as string:LR,0112,0E,MG9wbwEBhello2
# split message
# decode base64 string: MG9wbwEBhello2
[48, 111, 112]
*  request type:	3
* request flags:	0
* --------------
[48, 111, 112]
# message detected
# parse packet:	[48, 111, 112, 111, 1, 1]
= parsing msg
# handle msg
# read message: b'AT,OK\r\n'
# [set send mode]:	AT+SEND=4
# [message]		->	b'QHBv'
# read message: b'AT,OK\r\n'
* AT return verified, sending message
# read message: b'AT,SENDING\r\n'
# sending...
# decoding process finished.
# --------------------------
# in waiting: 1
# read message: b'AT,SENDED\r\n'
# msg: b'AT,SENDED'
# msg not passed
# inwaiting message to exsting route: {'name': 'message', 'viewType': 'default', 'type': 3, 'flags': 0, 'hopAddress': 111, 'prevHopAddress': 112, 'destAddress': 111, 'originSequence': 1, 'messageId': 1, 'count': 0, 'timestamp': 1642665564949.9612, 'text': 'hello2'}
# [sending std out]: {"name": "message", "viewType": "default", "type": 3, "flags": 0, "hopAddress": 111, "prevHopAddress": 112, "destAddress": 111, "originSequence": 1, "messageId": 1, "count": 0, "timestamp": 1642665564949.9612, "text": "hello2"}
# Shutdown requested by console key interrupt
